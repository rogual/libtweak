#!/usr/bin/env python3

import os.path
import tkinter as ui
from tkinter import ttk
from collections import defaultdict
from functools import partial



def load_extensions():

    import sys
    sys.modules['tweak'] = sys.modules[__name__]

    from importlib.machinery import SourceFileLoader
    try:
        tweak_ext = SourceFileLoader("tweak_ext", "tweak_ext.py").load_module()
        print(tweak_ext)
    except FileNotFoundError:
        pass


fifo = None
btn_reset = None


def send(param):
    name = param.name
    value = param.value

    global fifo
    if not fifo:
        # FIXME: Possible race condition. Not sure how to
        # “open for writing if exists” in Python
        if os.path.exists("Tweakfifo"):
            fifo = open("Tweakfifo", "wt")

    if fifo:
        print('set %s %s' % (name, value), file=fifo)
        fifo.flush()

    if btn_reset and value != initial[name]:
        btn_reset.config(state=ui.NORMAL)


class Widget:
    def __init__(self, param):
        self.param = param

    def update(self, value):
        self.param.value = value
        send(self.param)


class ScaleWidget(Widget):
    def __init__(self, root, param):
        super().__init__(param)
        minv, maxv = param.range or (-100, 100)

        w = self.tk_widget = self.frame = ttk.Frame(
            root
        )
        w.columnconfigure(0,weight=0)
        w.columnconfigure(1,weight=1)

        w = self.scale = ttk.Scale(
            self.frame,
            from_=minv,
            to=maxv,
            orient=ui.HORIZONTAL,
            command=self.update_scale
        )
        w.grid(row=0, column=1, sticky=ui.W+ui.E)

        self.var = ui.IntVar()

        w = self.readout = ttk.Label(
            self.frame,
            textvariable=self.var,
            width=4
        )
        w.grid(row=0, column=0)

        self.set_str(param.value or '0')

    def format(self, value):
        if self.param.type == 'int':
            return '%i' % int(float(value))
        return '%.2f' % float(value)

    def set_str(self, s):
        self.scale.set(float(s))

    def update_scale(self, s):
        value = self.scale.get()

        if self.param.type == 'int':
            if int(value) != value:
                value = round(value)
                self.scale.set(value)
                return

        self.update(value)
        self.var.set(self.format(value))


class RawStringWidget(Widget):
    def __init__(self, root, param):
        super().__init__(param)
        self.var = ui.StringVar()
        self.var.trace('w', self.trace)

        w = self.tk_widget = ttk.Entry(
            root,
            textvariable=self.var
        )
        self.set_str(param.value or '$')

    def trace(self, *a, **kw):
        self.update(self.var.get())

    def set(self, value):
        self.tk_widget.delete(0, ui.END)
        self.tk_widget.insert(0, value)

    def set_str(self, s):
        self.set(s)


class StringWidget(RawStringWidget):
    def update(self, value):
        super().update('$' + value)

    def set_str(self, s):
        self.set(s[1:])


class ToggleWidget(Widget):
    def __init__(self, root, param):
        super().__init__(param)
        self.var = ui.IntVar()
        self.var.trace('w', self.trace)

        w = self.tk_widget = ttk.Checkbutton(
            root,
            variable=self.var
        )
        self.set_str(param.value or '0')

    def trace(self, *a, **kw):
        self.update(self.var.get())

    def set_str(self, s):
        self.var.set(s)


class Param:
    widget = RawStringWidget

    def __init__(self, name, type, value, range):
        self.name = name
        self.type = type
        self.value = value
        self.range = range

    def ctype(self):
        return self.type

    def cvalue(self):
        return self.value


class StringParam(Param):
    widget = StringWidget

    def ctype(self):
        return 'std::string'

    def cvalue(self):
        v = self.value
        return '"' + v[1:].replace('\\', '\\\\').replace('"', '\\"') + '"'


class FloatParam(Param):
    widget = ScaleWidget


class IntParam(Param):
    widget = ScaleWidget


class BoolParam(Param):
    widget = ToggleWidget


types = defaultdict(
    lambda: Param,
    {
        'string': StringParam,
        'float': FloatParam,
        'int': IntParam,
        'bool': BoolParam
    }
)


def make_widget(param):
    return types[param.type].widget(root, param)


def read_tweakfile(path):
    params = defaultdict(dict)

    with open(path, "rt") as tf:
        for line in tf:
            line = line.strip()
            if line:
                line = line.split(' ', 2)
                cmd, name, blob = line
                if cmd == 'set':
                    value = blob
                    params[name]['value'] = value
                elif cmd == 'range':
                    args = blob.split(' ')
                    minv, maxv = map(float, args)
                    params[name]['range'] = minv, maxv
                elif cmd == 'type':
                    t, = blob.split(' ')
                    params[name]['type'] = t

    return {
        name: types[param['type']](
            name,
            param['type'],
            param.get('value'),
            param.get('range')
        )
        for name, param in params.items()
    }


if __name__ == '__main__':

    load_extensions()

    params = read_tweakfile("Tweakfile")

    initial = {k: p.value for k, p in params.items()}

    root = ui.Tk()
    root.title("Parameters")

    z = ttk.Frame(root,padding=10)
    z.grid(column=0,row=0,sticky=(ui.N,ui.S,ui.W,ui.E))
    root.columnconfigure(0,weight=1)
    root.rowconfigure(0,weight=1)
    root=z

    widgets = {}

    def reset():
        for k, p in params.items():
            if k in initial:
                v = p.value
                nv = initial[k]
                if nv != v:
                    p.value = nv
                    send(p)
                    widgets[k].set_str(nv)

        btn_reset.config(state=ui.DISABLED)


    def update_file():
        with open('Tweakfile', 'wt') as tf:
            for name, param in params.items():
                type = param.type
                print('type %s %s' % (name, type))

                range = param.range
                if range:
                    minv, maxv = range
                    print('range %s %s %s' % (name, minv, maxv), file=tf)

                value = param.value
                print('set %s %s' % (name, value), file=tf)


    for i, (name, param) in enumerate(sorted(params.items())):

        w = ttk.Label(root, text=name, padding = '0 0 10 0')
        w.grid(row=i, column=0, sticky=ui.W)

        w = make_widget(param)

        w.tk_widget.grid(row=i, column=1, sticky=ui.W+ui.E)
        widgets[name] = w

    ui.Grid.columnconfigure(root, 1, weight=1)

    w = btn_save = ttk.Button(root, text='Save Changes', command=update_file)
    w.grid(row=i+1, column=0, columnspan=2, sticky=ui.W+ui.E)

    w = btn_reset = ttk.Button(root, text='Reset', command=reset, state=ui.DISABLED)
    w.grid(row=i+2, column=0, columnspan=2, sticky=ui.W+ui.E)

    root.mainloop()

