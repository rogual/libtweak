#!/usr/bin/env python3

import os.path
import tkinter as ui
from collections import defaultdict
from functools import partial



def load_extensions():

    import sys
    sys.modules['tweak'] = sys.modules[__name__]

    from importlib.machinery import SourceFileLoader
    try:
        tweak_ext = SourceFileLoader("tweak_ext", "tweak_ext.py").load_module()
        print(tweak_ext)
    except FileNotFoundError:
        pass



fifo = None
btn_reset = None

def send(param):
    name = param['name']
    value = param['value']

    global fifo
    if not fifo:
        # FIXME: Possible race condition. Not sure how to
        # “open for writing if exists” in Python
        if os.path.exists("Tweakfifo"):
            fifo = open("Tweakfifo", "wt")

    if fifo:
        print('set %s %s' % (name, value), file=fifo)
        fifo.flush()

    if btn_reset and value != initial[name]:
        btn_reset.config(state=ui.NORMAL)


def read_tweakfile(path):
    params = defaultdict(dict)

    with open(path, "rt") as tf:
        for line in tf:
            line = line.strip()
            if line:
                line = line.split(' ', 2)
                cmd, name, blob = line
                params[name]['name'] = name
                if cmd == 'set':
                    value = blob
                    params[name]['value'] = value
                elif cmd == 'range':
                    args = blob.split(' ')
                    minv, maxv = map(float, args)
                    params[name]['range'] = minv, maxv
                elif cmd == 'type':
                    t, = blob.split(' ')
                    params[name]['type'] = t
    return params



class Widget:
    def __init__(self, param):
        self.param = param

    def update(self, value):
        self.param['value'] = value
        send(self.param)


class ScaleWidget(Widget):
    def __init__(self, root, param):
        super().__init__(param)
        minv, maxv = param.get('range', (-100, 100))
        w = self.tk_widget = ui.Scale(
            root,
            from_=minv,
            to=maxv,
            orient=ui.HORIZONTAL,
            resolution=1 if param['type'] == 'int' else 0,
            command=self.update
        )
        self.set_str(param.get('value', '0'))

    def set_str(self, s):
        self.tk_widget.set(float(s))


class RawStringWidget(Widget):
    def __init__(self, root, param):
        super().__init__(param)
        self.var = ui.StringVar()
        self.var.trace('w', self.trace)

        w = self.tk_widget = ui.Entry(
            root,
            textvariable=self.var
        )
        self.set_str(param.get('value', '$'))

    def trace(self, *a, **kw):
        self.update(self.var.get())

    def set(self, value):
        self.tk_widget.delete(0, ui.END)
        self.tk_widget.insert(0, value)

    def set_str(self, s):
        self.set(s)


class StringWidget(RawStringWidget):
    def update(self, value):
        super().update('$' + value)

    def set_str(self, s):
        self.set(s[1:])


class ToggleWidget(Widget):
    def __init__(self, root, param):
        super().__init__(param)
        self.var = ui.IntVar()
        self.var.trace('w', self.trace)

        w = self.tk_widget = ui.Checkbutton(
            root,
            variable=self.var
        )
        self.set_str(param.get('value', '0'))

    def trace(self, *a, **kw):
        self.update(self.var.get())

    def set_str(self, s):
        if s == '0':
            self.tk_widget.deselect()
        if s == '1':
            self.tk_widget.select()


widget_for_type = defaultdict(
    lambda: RawStringWidget,
    {
        'string': StringWidget,
        'float': ScaleWidget,
        'int': ScaleWidget,
        'bool': ToggleWidget
    }
)


def make_widget(param):
    return widget_for_type[param['type']](root, param)


if __name__ == '__main__':

    load_extensions()

    params = read_tweakfile("Tweakfile")

    initial = {k: p['value'] for k, p in params.items()}

    root = ui.Tk()
    root.title("Parameters")

    widgets = {}

    def reset():
        for k, p in params.items():
            if k in initial:
                v = p['value']
                nv = initial[k]
                if nv != v:
                    p['value'] = nv
                    send(p)
                    widgets[k].set_str(nv)

        btn_reset.config(state=ui.DISABLED)


    def update_file():
        with open('Tweakfile', 'wt') as tf:
            for name, param in params.items():
                type = param['type']
                print('type %s %s' % (name, type))

                range = param.get('range')
                if range:
                    minv, maxv = range
                    print('range %s %s %s' % (name, minv, maxv), file=tf)

                value = param['value']
                print('set %s %s' % (name, value), file=tf)


    for i, (name, param) in enumerate(sorted(params.items())):

        w = ui.Label(root, text=name)
        w.grid(row=i, column=0)

        w = make_widget(param)

        w.tk_widget.grid(row=i, column=1, sticky=ui.W+ui.E)
        widgets[name] = w

    ui.Grid.columnconfigure(root, 1, weight=1)

    w = btn_save = ui.Button(root, text='Save Changes', command=update_file)
    w.grid(row=i+1, column=0, columnspan=2, sticky=ui.W+ui.E)

    w = btn_reset = ui.Button(root, text='Reset', command=reset, state=ui.DISABLED)
    w.grid(row=i+2, column=0, columnspan=2, sticky=ui.W+ui.E)

    root.mainloop()

